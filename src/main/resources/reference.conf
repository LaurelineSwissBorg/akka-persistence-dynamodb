# This configures the default settings for all DynamoDB Journal plugin
# instances in the system. If you are using just one configuration for
# all persistent actors then you should point your akka.persistence.journal.plugin
# setting to this section.
#
# Otherwise you need to create differently named sections containing
# only those settings that shall be different from the defaults
# configured here, importing the defaults like so:
#
#   my-dynamodb-journal = ${dynamodb-journal}
#   my-dynamodb-journal {
#     <settings...>
#   }
#

dynamodb-journal {

  # The FQCN for the journal plugin implementation - DO NOT CHANGE
  class = "akka.persistence.dynamodb.journal.DynamoDBJournal"
  
  # The dispatcher that executes the replay logic for this plugin
  # instance - should not normally need to be changed.
  replay-dispatcher = "akka.persistence.dispatchers.default-replay-dispatcher"
  
  # The dispatcher that executes the future combinators needed for
  # transforming the AmazonDynamoDBAsyncClient results (i.e.
  # handling the back-off etc.)
  client-dispatcher = "dynamodb-journal.dispatcher"
  
  # The dispatcher that executes the write logic for this plugin
  # instance - should not normally need to be changed.
  plugin-dispatcher = "dynamodb-journal.dispatcher"
  
  # The name of the DynamoDB table to be used for this plugin instance
  journal-table = "akka-persistence"
  
  # The logical journal name, used in the partition keys.
  journal-name = "journal"
  
  # The number of shards to distribute the sequence number items over.
  sequence-shards = 10

  dynamodb = ${akka.stream.alpakka.dynamodb}

  # number of concurrently running replay prefetch operations for a
  # single PersistentActor; this prefetch means that during a replay
  # more events might be retrieved than specified with the `max`
  # parameter, with corresponding usage DynamoDB read units
  replay-parallelism = 10
  
  # If this is set to `on` then every DynamoDB request will be logged
  # at DEBUG level. Caution: this will generate A LOT of output.
  tracing = off
  
  # Set to `on` to log the detected configuration at INFO level at plugin startup.
  log-config = off
  
  # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
  aws-api-limits {
    max-batch-get = 100
    max-batch-write = 25
    max-item-size = 400000
    max-retries = 10
    initial-backoff-ms = 100
  }
  
  dispatcher {
    type = Dispatcher
    executor = "fork-join-executor"
    fork-join-executor {
      parallelism-min = 2
      parallelism-max = 8
    }
  }
}
dynamodb-snapshot-store {

  class="akka.persistence.dynamodb.snapshot.DynamoDBSnapshotStore"

  # The service endpoint to connect to for the DynamoDB instance that
  # shall be used. Please refer to the AWS documentation for details.
  endpoint = ${dynamodb-journal.endpoint}

  # The dispatcher that executes the future combinators needed for
  # transforming the AmazonDynamoDBAsyncClient results (i.e.
  # handling the back-off etc.)
  client-dispatcher = ${dynamodb-journal.client-dispatcher}

  # The name of the DynamoDB table to be used for this plugin instance
  snapshot-table = "akka-persistence-snapshot"

  # The logical journal name for which we persist snapshots, used in the partition keys.
  journal-name = ${dynamodb-journal.journal-name}

  dynamodb = ${dynamodb-journal.dynamodb}

  # If this is set to `on` then every DynamoDB request will be logged
  # at DEBUG level. Caution: this will generate A LOT of output.
  tracing = ${dynamodb-journal.tracing}

  # AWS API limits - DO NOT CHANGE UNLESS YOU KNOW WHAT YOU ARE DOING
  aws-api-limits = ${dynamodb-journal.aws-api-limits}
}

